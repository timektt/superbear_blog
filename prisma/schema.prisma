// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Enable query engine optimization for production
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String?
  content     Json     // Tiptap JSON content
  image       String?  // Cloudinary URL
  status      Status   @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      Author   @relation(fields: [authorId], references: [id])
  authorId    String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  tags        Tag[]
  
  // Analytics relations
  views       ArticleView[]
  interactions ArticleInteraction[]
  stats       ArticleStats?
  sourceRecommendations ContentRecommendation[] @relation("SourceRecommendations")
  targetRecommendations ContentRecommendation[] @relation("TargetRecommendations")
  entrySession ReadingSession[] @relation("SessionEntryArticle")
  exitSession ReadingSession[] @relation("SessionExitArticle")
  
  // User-generated content relations
  comments Comment[]
  reactions Reaction[]
  bookmarks Bookmark[]
  series   ArticleSeries[]
  
  @@map("articles")
}

model Author {
  id       String    @id @default(cuid())
  name     String
  bio      String?
  avatar   String?   // Cloudinary URL
  articles Article[]
  
  @@map("authors")
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  articles Article[]
  
  @@map("categories")
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  articles Article[]
  
  @@map("tags")
}

model AdminUser {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String    // Hashed
  role      AdminRole @default(EDITOR)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("admin_users")
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Newsletter {
  id              String            @id @default(cuid())
  email           String            @unique
  status          SubscriptionStatus @default(PENDING)
  verificationToken String?         @unique
  subscribedAt    DateTime          @default(now())
  verifiedAt      DateTime?
  unsubscribedAt  DateTime?
  preferences     Json?             // JSON object for subscription preferences
  source          String?           // Where they subscribed from (homepage, article, etc.)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  deliveries      CampaignDelivery[]
  events          NewsletterEvent[]
  newsletterPreferences NewsletterPreferences?
  
  @@map("newsletters")
}

model NewsletterCampaign {
  id          String            @id @default(cuid())
  title       String
  subject     String
  content     Json              // Compiled email content
  templateId  String?           // Reference to email template
  status      CampaignStatus    @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  recipients  Int               @default(0)
  openRate    Float?
  clickRate   Float?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  template    EmailTemplate?    @relation(fields: [templateId], references: [id])
  deliveries  CampaignDelivery[]
  events      NewsletterEvent[]
  snapshot    CampaignSnapshot?
  
  @@map("newsletter_campaigns")
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SNAPSHOTTING
  QUEUED
  SENDING
  PAUSED
  SENT
  COMPLETED
  FAILED
  CANCELLED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  AUTHOR
  VIEWER
}

// Email Template System Models
model EmailTemplate {
  id          String            @id @default(cuid())
  name        String            // Template name (e.g., "Weekly Digest", "Breaking News")
  subject     String            // Email subject line template
  description String?           // Template description for admin
  category    TemplateCategory  // Template type
  status      TemplateStatus    @default(DRAFT)
  
  // Template Content
  htmlContent String            // HTML email content
  textContent String?           // Plain text fallback
  variables   Json?             // Available template variables
  
  // Design Properties
  designConfig Json?            // Layout, colors, fonts configuration
  
  // Metadata
  createdBy   String            // Admin user who created it
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  campaigns   NewsletterCampaign[]
  versions    TemplateVersion[]
  
  @@map("email_templates")
}

model TemplateVersion {
  id          String        @id @default(cuid())
  templateId  String
  version     Int
  htmlContent String
  textContent String?
  designConfig Json?
  createdAt   DateTime      @default(now())
  
  template    EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, version])
  @@map("template_versions")
}

enum TemplateCategory {
  WELCOME       // Welcome email for new subscribers
  NEWSLETTER    // Regular newsletter templates
  BREAKING_NEWS // Urgent news alerts
  DIGEST        // Weekly/monthly digest
  PROMOTIONAL   // Marketing campaigns
  TRANSACTIONAL // System emails (unsubscribe confirmations, etc.)
}

enum TemplateStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

// Production-Ready Campaign System Models

// Campaign Delivery Tracking (Idempotency & Status)
model CampaignDelivery {
  id              String            @id @default(cuid())
  campaignId      String
  recipientId     String            // Newsletter.id
  recipientEmail  String
  status          DeliveryStatus    @default(QUEUED)
  attempts        Int               @default(0)
  lastAttemptAt   DateTime?
  deliveredAt     DateTime?
  lastError       String?
  idempotencyKey  String            @unique // hash(campaignId + recipientId)
  
  // Email content snapshot (frozen at send time)
  subject         String
  htmlContent     String
  textContent     String?
  preheader       String?
  
  // Tracking
  openedAt        DateTime?
  clickedAt       DateTime?
  bouncedAt       DateTime?
  complainedAt    DateTime?
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  campaign        NewsletterCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  recipient       Newsletter         @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  events          NewsletterEvent[]
  
  @@unique([campaignId, recipientId])
  @@index([status])
  @@index([campaignId])
  @@index([recipientEmail])
  @@map("campaign_deliveries")
}

// Email Events Tracking (Opens, Clicks, Bounces, etc.)
model NewsletterEvent {
  id              String            @id @default(cuid())
  campaignId      String?
  recipientId     String?           // Newsletter.id
  recipientEmail  String
  deliveryId      String?           // CampaignDelivery.id
  
  type            EventType
  timestamp       DateTime          @default(now())
  
  // Event metadata
  userAgent       String?
  ipAddress       String?
  location        String?
  linkUrl         String?           // For click events
  
  // Provider-specific data
  providerEventId String?           // SendGrid/Mailgun event ID
  providerData    Json?             // Raw provider webhook data
  
  createdAt       DateTime          @default(now())
  
  // Relations
  campaign        NewsletterCampaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  recipient       Newsletter?         @relation(fields: [recipientId], references: [id], onDelete: SetNull)
  delivery        CampaignDelivery?   @relation(fields: [deliveryId], references: [id], onDelete: SetNull)
  
  @@index([type, timestamp])
  @@index([campaignId])
  @@index([recipientEmail])
  @@map("newsletter_events")
}

// Email Suppression List (Bounces, Complaints, Unsubscribes)
model Suppression {
  id          String            @id @default(cuid())
  email       String            @unique
  reason      SuppressionReason
  source      String?           // Campaign ID or source that caused suppression
  timestamp   DateTime          @default(now())
  
  // Additional context
  bounceType  String?           // hard/soft bounce
  errorCode   String?           // SMTP error code
  errorMessage String?          // Human readable error
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([email])
  @@index([reason])
  @@map("suppressions")
}

// Newsletter Preferences (Frequency, Categories, Quiet Hours)
model NewsletterPreferences {
  id              String            @id @default(cuid())
  recipientId     String            @unique // Newsletter.id
  
  // Frequency settings
  frequency       FrequencyType     @default(WEEKLY)
  maxPerDay       Int               @default(1)
  maxPerWeek      Int               @default(3)
  
  // Content preferences
  categories      Json?             // Array of preferred categories
  topics          Json?             // Array of preferred topics/tags
  
  // Timing preferences
  timezone        String            @default("UTC")
  quietHoursStart Int?              // Hour (0-23) when quiet hours start
  quietHoursEnd   Int?              // Hour (0-23) when quiet hours end
  
  // Delivery preferences
  preferredDays   Json?             // Array of preferred days (0=Sunday, 6=Saturday)
  preferredTime   Int?              // Preferred hour for delivery (0-23)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  recipient       Newsletter        @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  
  @@map("newsletter_preferences")
}

// Campaign Snapshots (Frozen content at send time)
model CampaignSnapshot {
  id              String            @id @default(cuid())
  campaignId      String            @unique
  
  // Frozen content
  subject         String
  htmlContent     String
  textContent     String?
  preheader       String?
  
  // Template info at snapshot time
  templateId      String?
  templateVersion Int?
  
  // Article IDs included in this campaign
  articleIds      Json              // Array of article IDs
  
  // Generation metadata
  generatedAt     DateTime          @default(now())
  contentHash     String            // Hash of content for verification
  
  // Relations
  campaign        NewsletterCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@map("campaign_snapshots")
}

// Enums for new models
enum DeliveryStatus {
  QUEUED
  SENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  FAILED
  SUPPRESSED
}

enum EventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  UNSUBSCRIBED
  MARKED_AS_SPAM
}

enum SuppressionReason {
  HARD_BOUNCE
  SOFT_BOUNCE
  COMPLAINT
  UNSUBSCRIBE
  MANUAL
  INVALID_EMAIL
  BLOCKED
}

enum FrequencyType {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

// Advanced Article Analytics Models

// Article View Tracking (Privacy-compliant)
model ArticleView {
  id              String            @id @default(cuid())
  articleId       String
  
  // Privacy-compliant tracking (no PII)
  sessionId       String            // Hashed session identifier
  fingerprint     String?           // Browser fingerprint hash
  
  // View metadata
  timestamp       DateTime          @default(now())
  userAgent       String?
  referrer        String?
  country         String?           // From IP geolocation
  device          String?           // mobile/desktop/tablet
  
  // Engagement metrics
  timeOnPage      Int?              // Seconds spent on page
  scrollDepth     Float?            // Percentage scrolled (0-100)
  readingTime     Int?              // Estimated reading time in seconds
  bounced         Boolean           @default(false)
  
  // Interaction tracking
  linksClicked    Int               @default(0)
  socialShares    Int               @default(0)
  newsletterSignup Boolean          @default(false)
  
  createdAt       DateTime          @default(now())
  
  // Relations
  article         Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
  interactions    ArticleInteraction[]
  
  @@index([articleId, timestamp])
  @@index([sessionId])
  @@map("article_views")
}

// Detailed Interaction Tracking
model ArticleInteraction {
  id              String            @id @default(cuid())
  viewId          String
  articleId       String
  
  type            InteractionType
  timestamp       DateTime          @default(now())
  
  // Interaction details
  elementId       String?           // DOM element ID
  linkUrl         String?           // For link clicks
  socialPlatform  String?           // For social shares
  scrollPosition  Float?            // For scroll tracking
  
  // Context
  timeFromStart   Int?              // Milliseconds from page load
  
  createdAt       DateTime          @default(now())
  
  // Relations
  view            ArticleView       @relation(fields: [viewId], references: [id], onDelete: Cascade)
  article         Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@index([articleId, type])
  @@index([viewId])
  @@map("article_interactions")
}

// Aggregated Article Statistics (for performance)
model ArticleStats {
  id              String            @id @default(cuid())
  articleId       String            @unique
  
  // View metrics
  totalViews      Int               @default(0)
  uniqueViews     Int               @default(0)
  avgTimeOnPage   Float?            // Average seconds
  avgScrollDepth  Float?            // Average percentage
  bounceRate      Float?            // Percentage
  
  // Engagement metrics
  totalShares     Int               @default(0)
  totalClicks     Int               @default(0)
  newsletterSignups Int             @default(0)
  
  // Performance metrics
  avgReadingTime  Float?            // Average estimated reading time
  completionRate  Float?            // Percentage who read to end
  
  // Time-based metrics
  viewsToday      Int               @default(0)
  viewsThisWeek   Int               @default(0)
  viewsThisMonth  Int               @default(0)
  
  // Peak performance
  peakViewsHour   Int               @default(0)
  peakViewsDay    Int               @default(0)
  
  // Last updated
  lastCalculated  DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  article         Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@map("article_stats")
}

// Popular Content Recommendations
model ContentRecommendation {
  id              String            @id @default(cuid())
  sourceArticleId String
  targetArticleId String
  
  // Recommendation metrics
  score           Float             // Recommendation strength (0-1)
  reason          RecommendationType
  
  // Performance tracking
  impressions     Int               @default(0)
  clicks          Int               @default(0)
  clickRate       Float?            // clicks/impressions
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  sourceArticle   Article           @relation("SourceRecommendations", fields: [sourceArticleId], references: [id], onDelete: Cascade)
  targetArticle   Article           @relation("TargetRecommendations", fields: [targetArticleId], references: [id], onDelete: Cascade)
  
  @@unique([sourceArticleId, targetArticleId])
  @@index([sourceArticleId])
  @@map("content_recommendations")
}

// Reading Sessions (for user journey tracking)
model ReadingSession {
  id              String            @id @default(cuid())
  sessionId       String            // Hashed session identifier
  
  // Session metadata
  startTime       DateTime          @default(now())
  endTime         DateTime?
  duration        Int?              // Total session duration in seconds
  
  // Session stats
  articlesRead    Int               @default(0)
  totalReadTime   Int               @default(0)
  pagesViewed     Int               @default(0)
  
  // Entry/exit tracking
  entryArticleId  String?           // First article viewed
  exitArticleId   String?           // Last article viewed
  referrer        String?
  
  // Device/location
  userAgent       String?
  country         String?
  device          String?
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  entryArticle    Article?          @relation("SessionEntryArticle", fields: [entryArticleId], references: [id], onDelete: SetNull)
  exitArticle     Article?          @relation("SessionExitArticle", fields: [exitArticleId], references: [id], onDelete: SetNull)
  
  @@index([sessionId])
  @@index([startTime])
  @@map("reading_sessions")
}

// Analytics Enums
enum InteractionType {
  LINK_CLICK
  SOCIAL_SHARE
  NEWSLETTER_SIGNUP
  SCROLL_MILESTONE
  TIME_MILESTONE
  COPY_TEXT
  PRINT_ARTICLE
  BOOKMARK
}

enum RecommendationType {
  SIMILAR_CONTENT     // Based on content similarity
  SAME_CATEGORY       // Same category articles
  SAME_AUTHOR         // Same author articles
  TRENDING            // Currently trending
  POPULAR             // Most popular overall
  RECENT              // Recently published
  USER_BEHAVIOR       // Based on user reading patterns
}

// User-generated content models
model Comment {
  id              String        @id @default(cuid())
  articleId       String
  parentId        String?
  body            String
  authorName      String
  authorEmailHash String
  status          CommentStatus @default(pending)
  createdAt       DateTime      @default(now())
  
  article Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parent  Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

enum CommentStatus {
  pending
  approved
  rejected
}

model Reaction {
  id        String   @id @default(cuid())
  articleId String
  emailHash String
  type      String   @default("like")
  createdAt DateTime @default(now())
  
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@unique([articleId, emailHash, type])
  @@map("reactions")
}

model Bookmark {
  id        String   @id @default(cuid())
  articleId String
  emailHash String
  createdAt DateTime @default(now())
  
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@unique([articleId, emailHash])
  @@map("bookmarks")
}

model AuthorProfile {
  id          String  @id @default(cuid())
  slug        String  @unique
  displayName String
  bio         String
  avatarUrl   String?
  socialsJson String
  
  @@map("author_profiles")
}

model Series {
  id          String @id @default(cuid())
  slug        String @unique
  title       String
  description String?
  articles    ArticleSeries[]
  
  @@map("series")
}

model ArticleSeries {
  articleId     String
  seriesId      String
  orderInSeries Int
  
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  series  Series  @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  
  @@id([articleId, seriesId])
  @@map("article_series")
}