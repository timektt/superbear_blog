// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Enable query engine optimization for production
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String?
  content     Json     // Tiptap JSON content
  image       String?  // Cloudinary URL
  status      Status   @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      Author   @relation(fields: [authorId], references: [id])
  authorId    String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  tags        Tag[]
  
  @@map("articles")
}

model Author {
  id       String    @id @default(cuid())
  name     String
  bio      String?
  avatar   String?   // Cloudinary URL
  articles Article[]
  
  @@map("authors")
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  articles Article[]
  
  @@map("categories")
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  articles Article[]
  
  @@map("tags")
}

model AdminUser {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String    // Hashed
  role      AdminRole @default(EDITOR)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("admin_users")
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Newsletter {
  id              String            @id @default(cuid())
  email           String            @unique
  status          SubscriptionStatus @default(PENDING)
  verificationToken String?         @unique
  subscribedAt    DateTime          @default(now())
  verifiedAt      DateTime?
  unsubscribedAt  DateTime?
  preferences     Json?             // JSON object for subscription preferences
  source          String?           // Where they subscribed from (homepage, article, etc.)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("newsletters")
}

model NewsletterCampaign {
  id          String            @id @default(cuid())
  title       String
  subject     String
  content     Json              // Email template content
  status      CampaignStatus    @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  recipients  Int               @default(0)
  openRate    Float?
  clickRate   Float?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@map("newsletter_campaigns")
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  AUTHOR
  VIEWER
}