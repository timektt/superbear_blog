# Docker Compose configuration for Media Management System
version: '3.8'

services:
  # Main application with media management
  app:
    build:
      context: ..
      dockerfile: docker/media-system.dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DIRECT_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - REDIS_URL=${REDIS_URL}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-10485760}
      - SUPPORTED_IMAGE_FORMATS=${SUPPORTED_IMAGE_FORMATS:-image/jpeg,image/png,image/gif,image/webp,image/svg+xml}
      - DEFAULT_UPLOAD_FOLDER=${DEFAULT_UPLOAD_FOLDER:-uploads}
      - ENABLE_AUTO_CLEANUP=${ENABLE_AUTO_CLEANUP:-true}
      - CLEANUP_SCHEDULE=${CLEANUP_SCHEDULE:-0 2 * * 0}
      - CLEANUP_ORPHAN_DAYS=${CLEANUP_ORPHAN_DAYS:-30}
      - ENABLE_MEDIA_SECURITY=${ENABLE_MEDIA_SECURITY:-true}
      - DEBUG_MEDIA=${DEBUG_MEDIA:-false}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      - UPLOAD_RATE_LIMIT=${UPLOAD_RATE_LIMIT:-10}
      - MEDIA_API_RATE_LIMIT=${MEDIA_API_RATE_LIMIT:-100}
      - CLEANUP_RATE_LIMIT=${CLEANUP_RATE_LIMIT:-5}
      - ENABLE_SECURITY_HEADERS=${ENABLE_SECURITY_HEADERS:-true}
      - ENABLE_CSRF_PROTECTION=${ENABLE_CSRF_PROTECTION:-true}
      - STRIP_EXIF_DATA=${STRIP_EXIF_DATA:-true}
    depends_on:
      - postgres
      - redis
    volumes:
      - media_uploads:/app/uploads
    networks:
      - media_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-superbear_blog}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - media_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - media_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - media_uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - media_network
    restart: unless-stopped
    profiles:
      - with-nginx

  # Media cleanup cron job
  media-cleanup:
    build:
      context: ..
      dockerfile: docker/media-system.dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DIRECT_URL}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - CLEANUP_ORPHAN_DAYS=${CLEANUP_ORPHAN_DAYS:-30}
    depends_on:
      - postgres
      - redis
    networks:
      - media_network
    restart: unless-stopped
    command: >
      sh -c "
        echo '${CLEANUP_SCHEDULE:-0 2 * * 0} curl -X POST http://app:3000/api/cron/media-cleanup' > /etc/crontabs/root &&
        crond -f
      "
    profiles:
      - with-cron

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_uploads:
    driver: local

networks:
  media_network:
    driver: bridge